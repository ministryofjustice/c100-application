# Ruby CircleCI configuration file
#
# Check https://circleci.com/docs/2.0/configuration-reference/ for more details
#
version: 2.1

references:
  app_containers: &app_containers
    docker:
      - image: circleci/ruby:2.6.5-node-browsers
        environment:
          RAILS_ENV: test
          RACK_ENV: test
          DATABASE_URL: "postgres://postgres@localhost/c100-application-test"
          EXTERNAL_URL: mocked_in_tests
          GOVUK_NOTIFY_API_KEY: mocked_in_tests
      - image: circleci/postgres:10.4
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: c100-application-test
  cloud_container: &cloud_container
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: family-justice


jobs:
  test:
    <<: *app_containers
    parameters:
      test_command:
        type: string
        default: bundle exec rake test:all_the_things master
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle
            npm install

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # so mutant only runs on modified files; refer to mutant.rake for more details
      - run: git remote set-branches origin master && git fetch

      - run:
          name: run tests
          command: << parameters.test_command >>

  build_image:
    <<: *cloud_container
    parameters:
      env_name:
        type: string
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: build docker image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -t app .

      - run:
          name: push docker image
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env_name >>.latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env_name >>.latest"

  deploy_image:
    <<: *cloud_container
    parameters:
      env_name:
        type: string
    steps:
      - checkout

      - run:
          name: kubectl use context
          command: |
            setup-kube-auth
            kubectl config use-context << parameters.env_name >>

      - deploy:
          name: rolling update image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n c100-application-<< parameters.env_name >> \
                    deployment/c100-application-deployment-<< parameters.env_name >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl set image -n c100-application-<< parameters.env_name >> \
                    deployment/c100-application-sidekiq-<< parameters.env_name >> \
                    sidekiq="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n c100-application-<< parameters.env_name >> \
                    deployment/c100-application-deployment-<< parameters.env_name >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"

  tag_production:
    <<: *cloud_container
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: promote staging image to production
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker pull "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" \
                       "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:production.latest"

            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:production.latest"

workflows:
  test-build-deploy:
    jobs:
      - test
      ### dev ###
      - build_image:
          name: build-dev
          env_name: dev
          requires:
            - test
          filters:
            branches:
              only: develop
      - deploy_image:
          name: deploy-dev
          env_name: dev
          requires:
            - build-dev
      ### staging ###
      - build_image:
          name: build-staging
          env_name: staging
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy_image:
          name: deploy-staging
          env_name: staging
          requires:
            - build-staging
      ### production ###
      - approve_production:
          type: approval
          requires:
            - deploy-staging
      - tag_production:
          requires:
            - approve_production
      - deploy_image:
          name: deploy-production
          env_name: production
          requires:
            - tag_production

  smoke-tests:
    jobs:
      - test:
          name: smoke-tests
          test_command: bundle exec cucumber -p smoke
    triggers:
      - schedule:
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - master
