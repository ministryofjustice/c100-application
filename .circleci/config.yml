# Ruby CircleCI configuration file
#
# Check https://circleci.com/docs/2.0/configuration-reference/ for more details
#
version: 2.1

# orbs: 
orbs:
  browser-tools: circleci/browser-tools@1.4.4
  aws-cli: circleci/aws-cli@4.0.0 # use v4 of this orb
  aws-ecr: circleci/aws-ecr@8.2.1 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate

references:
  app_containers: &app_containers
    docker:
      - image: cimg/ruby:3.3.4-browsers
        environment:
          RAILS_ENV: test
          RACK_ENV: test
          DATABASE_URL: "postgres://postgres@localhost/c100-application-test"
          EXTERNAL_URL: mocked_in_tests
          GOVUK_NOTIFY_API_KEY: mocked_in_tests
      - image: circleci/postgres:10.4
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: c100-application-test
  cloud_container: &cloud_container
    docker:
      - image: ministryofjustice/cloud-platform-tools:1.24
        environment:
          GITHUB_TEAM_NAME_SLUG: sustainingdevs
          REPO_NAME: c100-application

jobs:
  test:
    <<: *app_containers
    parameters:
      test_command:
        type: string
        default: bundle exec rake test:all_the_things
    resource_class: medium+
    steps:
      - run: sudo apt-get update
      - browser-tools/install-chrome:
          chrome-version: 128.0.6613.114
      - run:
          name: Install ChromeDriver
          command: |
            CHROME_DRIVER_VERSION=$(curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE)
            wget https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip
            unzip chromedriver_linux64.zip
            sudo mv chromedriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/chromedriver
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1.1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1.1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle
            npm install

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1.1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      # - run: bundle exec rake db:create
      # - run: bundle exec rake db:schema:load

      # so mutant only runs on modified files; refer to mutant.rake for more details
      - run: git remote set-branches origin master && git fetch

      - run:
         name: run tests
         command: << parameters.test_command >>
    
  build_and_push_image:
    executor: aws-ecr/default # use the aws-ecr/default executor to start the docker daemon
    steps:
      # Checkout your repository
      - checkout
      # Authenticate to AWS using OIDC v2 with the AWS CLI
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME # this will use the env var
          region: $ECR_REGION # this will use the env var
      # Authenticate to the ECR repository using the standard command
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      # Build and push your Docker image
      - aws-ecr/build-image:
          push-image: true
          tag: ${CIRCLE_SHA1},staging.latest
          region: $ECR_REGION # this will use the env var
          repo: $ECR_REPOSITORY # this will use the env var
  build_image:
    <<: *cloud_container
    parameters:
      env_name:
        type: string
    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true

      - run:
          name: build docker image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -t app .

      - run:
          name: push docker image
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env_name >>.latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env_name >>.latest"
 
  deploy_image_to_live:
    <<: *cloud_container
    parameters:
      env_name:
        type: string
    steps:
      - checkout

      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${KUBE_ENV_LIVE_STAGING_CACERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${KUBE_ENV_LIVE_STAGING_NAME} --certificate-authority=./ca.crt --server=https://${KUBE_ENV_LIVE_STAGING_NAME}
            kubectl config set-credentials circleci --token=${KUBE_ENV_LIVE_STAGING_TOKEN}
            kubectl config set-context ${KUBE_ENV_LIVE_STAGING_NAME} --cluster=${KUBE_ENV_LIVE_STAGING_NAME} --user=circleci --namespace=${KUBE_ENV_LIVE_STAGING_NAMESPACE}
            kubectl config use-context ${KUBE_ENV_LIVE_STAGING_NAME}

      - deploy:
          name: rolling update image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n c100-application-<< parameters.env_name >> \
                    deployment/c100-application-deployment-<< parameters.env_name >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl set image -n c100-application-<< parameters.env_name >> \
                    deployment/c100-application-sidekiq-<< parameters.env_name >> \
                    sidekiq="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n c100-application-<< parameters.env_name >> \
                    deployment/c100-application-deployment-<< parameters.env_name >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"

  deploy_image_to_live_prod:
    <<: *cloud_container
    parameters:
      env_name:
        type: string
    steps:
      - checkout

      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${KUBE_ENV_LIVE_PRODUCTION_CACERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${KUBE_ENV_LIVE_PRODUCTION_NAME} --certificate-authority=./ca.crt --server=https://${KUBE_ENV_LIVE_PRODUCTION_NAME}
            kubectl config set-credentials circleci --token=${KUBE_ENV_LIVE_PRODUCTION_TOKEN}
            kubectl config set-context ${KUBE_ENV_LIVE_PRODUCTION_NAME} --cluster=${KUBE_ENV_LIVE_PRODUCTION_NAME} --user=circleci --namespace=${KUBE_ENV_LIVE_PRODUCTION_NAMESPACE}
            kubectl config use-context ${KUBE_ENV_LIVE_PRODUCTION_NAME}

      - deploy:
          name: rolling update image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n c100-application-<< parameters.env_name >> \
                    deployment/c100-application-deployment-<< parameters.env_name >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl set image -n c100-application-<< parameters.env_name >> \
                    deployment/c100-application-sidekiq-<< parameters.env_name >> \
                    sidekiq="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n c100-application-<< parameters.env_name >> \
                    deployment/c100-application-deployment-<< parameters.env_name >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"                   
  tag_production:
    executor: aws-ecr/default # use the aws-ecr/default executor to start the docker daemon
    parameters:
      env_name:
        type: string
    steps:
      # Authenticate to AWS using OIDC v2 with the AWS CLI
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME # this will use the env var
          region: $ECR_REGION # this will use the env var
      # Authenticate to the ECR repository using the standard command
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      # Build and push your Docker image
      - run:
          name: promote staging image to production
          command: |
            docker pull "${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/sustainingdevs/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag "${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/sustainingdevs/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" \
                       "${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/sustainingdevs/${CIRCLE_PROJECT_REPONAME}:production.latest"

            docker push "${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/sustainingdevs/${CIRCLE_PROJECT_REPONAME}:production.latest"


workflows:
  test-build-deploy:
    jobs:
      - test
      ### staging ###
      - build_and_push_image:
          name: build-staging
          requires:
            - test
          filters:
            branches:
              only:
                - /^master$/
      - deploy_image_to_live:
          name: deploy-staging-live
          env_name: staging
          requires:
            - build-staging
          filters:
            branches:
              only:
                - /^master$/
      ### production ###
      - approve_production:
          type: approval
          requires:
            - deploy-staging-live
          filters:
            branches:
              only: master
      - tag_production:
          env_name: staging
          requires:
            - approve_production
          filters:
            branches:
              only: master
      - deploy_image_to_live_prod:
          name: deploy-production-live
          env_name: production
          requires:
            - tag_production
          filters:
            branches:
              only: master
